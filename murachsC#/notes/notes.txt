//MURACHS C#

//CH2
The form designer allows you to design a form 
and implement it at the same time. Sketching the interface
on paper is paltry.

//Terms 
template -  project template, contains many features that you may use in your project.
            (windows forms app) contains many dependencies 

label - text field in form. They contain many mutable 
properties.

text box - Contains text. comprises manifold properties

button - executes function implementation when clicked

primary control - control that is used to set other components

property - settings for components

tab order - Order in which component is highlighted when pressing the tab key

focus - component that is currently selected

access key - alternative method of selecting / executing a component

//CH3 
object - region of computers memory. Requires a type and name
eg, forms and controls 

instantiation - instance of a class 

object oriented programming - Using objects to solve problems

properties - define the objects characteristics and data

methods of an object- determine the operations that can be performed 
by the object

object event - signals sent by the object to your application
that something has happened that ca be responded to 

members of an object or class- properties, methods, and events 
of an object or class

class - the code that defines the characteristics of an object.
A template for an object


-When using the Form Designer, visual studio automatically generates
 C# code that creates a new class based on the Form class. 
 Then, when you run the project a form object is instantiated
 from the new class 

-When appending a control to a form visual studio automatically 
generates C# code in the class for the form that instantiates
a control object from the appropriate class and sets the control's
default properties.

-When moving or sizing a control, visual studio automatically sets
the properties that specify the location and size of the control.

-property window only sets the properties at the start of the application, 
code allows you to alter the properties as an application is running

this keyword - current object 

- you will rarely have to refer to events since visual studio 
automatically generates the code for working with events

event handler - special type of method. Used to respond to an event

event wiring - visual studio generates a statement that connects or
wires the event handler to the event

- you are most likely to create event handlers for the default events of form
and controls

- before you start a control for an event handler , you should always 
set hte Name property of the control.

if you dont visual studio will change the name of the object in the event wiring,
but it wont change the name of the object in the method name

- avoid modifying the method declaration that's generated for you when 
you create an event handler.

- you cannot simply delete an event handler once you've added it. 
If you do, you will get an error when you try to run the application.
This error will be displayed in an error list window, and it will indicate 
that the event handler is missing.

- to handle the load event for a form double click the form itself

- event handlers are stored in the cs file for the form

- most of the code that is generated when you design a form, including 
the statement that wires the event to the event handler, is stored in the 
Designers.cs file for the form. If necessary, you can open this file to 
view or delete the event wiring 

- if you delete an event handler, you must also delete the wiring for the 
event. To do this, double click the error message in the error list and Then
delete the statement

- press tab twice to select option in the intelli-j completion list

- To surround existing code with a code snippet, select the code, right-click on it, 
and select the Surround With command from the resulting menu. Then, select the 
appropriate snippet. 


//CH4
- use var to let the type of the variable to be inferred from the values 
that are assigned to them. Useful for working with tuple

-Use camelCase in C#

- use Pascal notation for constants 
eg const int MaxCards = 52

built-in data type - types provided by the C# language
int, double , char,  bool, etc...

bit - binary digit. 0 or 1 

byte - set of bits. 8 bits. A unit of memory

integer - data type, holds an integral value

Unicode character set -  

ascii character set - code that is used to represent a character

boolean value - true or false 

varaible - name object

constant - immutable object 

declare a variable or constant - var x = 7 const int x = 7

camel notation - each word starts with an upper case letter after the first 

digit seperator - _ used to improve the readability of an integral value 

pascal notation - each word starts with an upper case letter, even the first 
common naming convention for contansts 

literal - r value literal value int x = 7 the value 7 is the literal 

scientific notation - e syntax used to represent a number 
values may be converted into scientific notation if they are too large

aritmetic expression - x * y 

arithmetic operators - ^ * - + / % 

operand - left or right of the operator 

binary operator - take two operands 

unary operator  - takes one operand 

prefix an operand - --object ++object

postfix an operand object-- ++object 

assignment statement - int x = 7, x = 11 

assignment operator - operator = 

order of precedence - order in which expressions are evaluated 

casting - converting one type to another type 

implicit cast - compiler does the conversion secretly 
eg assignning a double to an int object, the double is truncated 
as a result 

widening conversion - assignning a smaller value to a larger type 
the smaller value is converted to that type eg 
assigning an int to a double object 

explicit cast - the programmer explicitly does the conversion
(double)7.7

strict type semantics - an explicit cast is required to perform a narrowing conversion

static method - static methods do not require an instance of a class to be used
they can be accessed by the . operator and the class name 

argument - passed into functions 

precision - amount of digits to display after the decimal 

bankers rounding - if the number ends in 5  it is always rounded to an even number. 
Used to circumvent rounding issues 

instance method - member function within a class interface 

instantiation -declaring an instance of a class 
eg Point x;

pseudorandom number - random integral values that is calculated on a seed
unix time, not real random 

seed value - calculated on unix time 

string - type, array of characters. Comprises manifold methods 

string literal - anything that is between " " 

null value- vlaue is unknown 

empty string - ""

concatinate strings - joining two strings using operator + or += 

escape sequence - \n \t \r \\ \"

verbatim string literal - appending a string literal to a string using @
is used for file paths 

structure - supports a built in data type, name for the type 
c# keywords such as int long float double bool etc.. are aliases for the 
structure 

value type - structures hold store their own data 

reference type - does not store the data itself. It stores a reference
to the area of memory where the data is stored 

scope - region of a program

class scope - regiono within a class 

class variable - variable within the class 

method scope- region within a code block or parameter list 

lifetime - lifetime of object before deallocation

enumeration - enum type , used when you need a set of related constants 
such as up down left right on off red blue green 

member - data in class declaration. accessable using the .(dot) operator

nullable type - allows you to store a null value in a value type . C# feature

nullable value type -using (?) after the type in the declaration of a value type

null-coalescing operator - tests the value of a nullable type, usable with 
reference types and nullable value types, since reference types are null 
by default 

null coalescing assignment operator - assigning a value to an object 
only if its value is null 

//CH5 
boolean expression - an expression that evaluates to true or false

relational operator - operators such as == != > < >= <=

logical operator - operators such as &&, ||, &, |, !

conditional operator - operators used to code a boolean expressions
Also called arithmetic if. Prevents us from writing long winded code


labda operator - replaces case label in switch statement. Means goto. 
Only one statement is executed when using it

if else statement - selection statements that control the flow of the code 

if statment - selection statement. If the expression evaluates to true, 
the code block is executed 

selection structure - if else chain and switch 

block scope - statments within a code block 

nested if statment - an if within another if

switch statement - common control structure, similar to if else chain 
contains a match condition case labels and a default clause 

match expression - expression that is used to match a case label 
in a switch statement 

case label - constant expression that if evaluated against a match expression
if true the code block for the matching case label is excecuted

default label - exucuted when none of the case labels are matched 

break statement - used to exit iteration early or a switch statement to prevent 
fall through behaviour 

fall through - when the break keyword is ommitted the program jumps to the next statment 
in the switch. However, C# does not allow this behaviour 

no fall through rule - C# does not permit fallthrough behaviour unless 
the case label is empty


discard - similar to the default clause in the switch control structure
used with the labda operator 

tenary operator - same as conditional operator 

conditional expression - expressions containing conditional operators 
evaluates to true or false

iteration structure - for, while, do-while statements 

while statement - while (x< 7)

while loop- while(x<7){
    console.writeline("Shawn");
}

do while statement - same as while loop but the do clause is executed once 
always 

inifinite loop - limitless iteration

for loop - takes two expressions and a prefix or postfix operator 

jump statement- goto keywod. Not recommended sice it is difficult to maintain

continue statment - goes not next iteration 

breakpoint - used to debug errors in code 
compiler haults execution when a breakpoint is encountered 

margin indicator bar - location to place breakpoints 

execution point - code that is marked with the breakpoint icon 

stepthrough code - executed with the f10 goes to next statement


